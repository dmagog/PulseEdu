#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã PulseEdu
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import logging
import os
import sys
import time
from pathlib import Path

import requests

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from app.database.session import engine

        with engine.connect() as conn:
            result = conn.execute("SELECT 1")
            result.fetchone()

        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        return False


def check_rabbitmq():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RabbitMQ"""
    try:
        import pika

        rabbitmq_url = os.getenv("RABBITMQ_URL", "amqp://pulseedu:pulseedu@localhost:5672//")
        connection = pika.BlockingConnection(pika.URLParameters(rabbitmq_url))
        connection.close()

        logger.info("‚úÖ RabbitMQ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå RabbitMQ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False


def check_web_app():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        base_url = os.getenv("APP_BASE_URL", "http://localhost:8000")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
        response = requests.get(f"{base_url}/healthz", timeout=10)
        if response.status_code == 200:
            logger.info("‚úÖ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
            return True
        else:
            logger.error(f"‚ùå –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: HTTP {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
        return False


def check_celery_workers():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Celery workers"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Flower –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        flower_url = "http://localhost:5555"
        try:
            response = requests.get(f"{flower_url}/api/workers", timeout=5)
            if response.status_code == 200:
                workers = response.json()
                active_workers = [w for w in workers.values() if w.get("status")]
                if active_workers:
                    logger.info(f"‚úÖ Celery workers –∞–∫—Ç–∏–≤–Ω—ã: {len(active_workers)} –≤–æ—Ä–∫–µ—Ä–æ–≤")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è Celery workers –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã")
                    return False
        except:
            logger.warning("‚ö†Ô∏è Flower –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É workers")
            return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Celery workers: {e}")
        return False


def check_mailhog():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MailHog"""
    try:
        response = requests.get("http://localhost:8025", timeout=5)
        if response.status_code == 200:
            logger.info("‚úÖ MailHog –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            logger.warning("‚ö†Ô∏è MailHog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è MailHog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False


def check_adminer():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Adminer"""
    try:
        response = requests.get("http://localhost:8080", timeout=5)
        if response.status_code == 200:
            logger.info("‚úÖ Adminer –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            logger.warning("‚ö†Ô∏è Adminer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Adminer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    logger.info("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã PulseEdu")

    checks = [
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", check_database),
        ("RabbitMQ", check_rabbitmq),
        ("–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", check_web_app),
        ("Celery workers", check_celery_workers),
        ("MailHog", check_mailhog),
        ("Adminer", check_adminer),
    ]

    results = []
    for name, check_func in checks:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {name}...")
        result = check_func()
        results.append((name, result))

        if not result and name in ["–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "RabbitMQ", "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"]:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç {name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            sys.exit(1)

    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    for name, result in results:
        status = "‚úÖ OK" if result else "‚ùå FAIL"
        logger.info(f"  {name}: {status}")

    failed_checks = [name for name, result in results if not result]
    if failed_checks:
        logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(failed_checks)}")
    else:
        logger.info("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")


if __name__ == "__main__":
    main()
